{"version":3,"sources":["node_modules/exif-js/exif.js","src/VueQuickCropper.vue","index.js"],"names":["install","Vue","component","VueQuickCropper"],"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","file":"index.map","sourceRoot":"..","sourcesContent":["(function() {\n\n    var debug = false;\n\n    var root = this;\n\n    var EXIF = function(obj) {\n        if (obj instanceof EXIF) return obj;\n        if (!(this instanceof EXIF)) return new EXIF(obj);\n        this.EXIFwrapped = obj;\n    };\n\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = EXIF;\n        }\n        exports.EXIF = EXIF;\n    } else {\n        root.EXIF = EXIF;\n    }\n\n    var ExifTags = EXIF.Tags = {\n\n        // version tags\n        0x9000 : \"ExifVersion\",             // EXIF version\n        0xA000 : \"FlashpixVersion\",         // Flashpix format version\n\n        // colorspace tags\n        0xA001 : \"ColorSpace\",              // Color space information tag\n\n        // image configuration\n        0xA002 : \"PixelXDimension\",         // Valid width of meaningful image\n        0xA003 : \"PixelYDimension\",         // Valid height of meaningful image\n        0x9101 : \"ComponentsConfiguration\", // Information about channels\n        0x9102 : \"CompressedBitsPerPixel\",  // Compressed bits per pixel\n\n        // user information\n        0x927C : \"MakerNote\",               // Any desired information written by the manufacturer\n        0x9286 : \"UserComment\",             // Comments by user\n\n        // related file\n        0xA004 : \"RelatedSoundFile\",        // Name of related sound file\n\n        // date and time\n        0x9003 : \"DateTimeOriginal\",        // Date and time when the original image was generated\n        0x9004 : \"DateTimeDigitized\",       // Date and time when the image was stored digitally\n        0x9290 : \"SubsecTime\",              // Fractions of seconds for DateTime\n        0x9291 : \"SubsecTimeOriginal\",      // Fractions of seconds for DateTimeOriginal\n        0x9292 : \"SubsecTimeDigitized\",     // Fractions of seconds for DateTimeDigitized\n\n        // picture-taking conditions\n        0x829A : \"ExposureTime\",            // Exposure time (in seconds)\n        0x829D : \"FNumber\",                 // F number\n        0x8822 : \"ExposureProgram\",         // Exposure program\n        0x8824 : \"SpectralSensitivity\",     // Spectral sensitivity\n        0x8827 : \"ISOSpeedRatings\",         // ISO speed rating\n        0x8828 : \"OECF\",                    // Optoelectric conversion factor\n        0x9201 : \"ShutterSpeedValue\",       // Shutter speed\n        0x9202 : \"ApertureValue\",           // Lens aperture\n        0x9203 : \"BrightnessValue\",         // Value of brightness\n        0x9204 : \"ExposureBias\",            // Exposure bias\n        0x9205 : \"MaxApertureValue\",        // Smallest F number of lens\n        0x9206 : \"SubjectDistance\",         // Distance to subject in meters\n        0x9207 : \"MeteringMode\",            // Metering mode\n        0x9208 : \"LightSource\",             // Kind of light source\n        0x9209 : \"Flash\",                   // Flash status\n        0x9214 : \"SubjectArea\",             // Location and area of main subject\n        0x920A : \"FocalLength\",             // Focal length of the lens in mm\n        0xA20B : \"FlashEnergy\",             // Strobe energy in BCPS\n        0xA20C : \"SpatialFrequencyResponse\",    //\n        0xA20E : \"FocalPlaneXResolution\",   // Number of pixels in width direction per FocalPlaneResolutionUnit\n        0xA20F : \"FocalPlaneYResolution\",   // Number of pixels in height direction per FocalPlaneResolutionUnit\n        0xA210 : \"FocalPlaneResolutionUnit\",    // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution\n        0xA214 : \"SubjectLocation\",         // Location of subject in image\n        0xA215 : \"ExposureIndex\",           // Exposure index selected on camera\n        0xA217 : \"SensingMethod\",           // Image sensor type\n        0xA300 : \"FileSource\",              // Image source (3 == DSC)\n        0xA301 : \"SceneType\",               // Scene type (1 == directly photographed)\n        0xA302 : \"CFAPattern\",              // Color filter array geometric pattern\n        0xA401 : \"CustomRendered\",          // Special processing\n        0xA402 : \"ExposureMode\",            // Exposure mode\n        0xA403 : \"WhiteBalance\",            // 1 = auto white balance, 2 = manual\n        0xA404 : \"DigitalZoomRation\",       // Digital zoom ratio\n        0xA405 : \"FocalLengthIn35mmFilm\",   // Equivalent foacl length assuming 35mm film camera (in mm)\n        0xA406 : \"SceneCaptureType\",        // Type of scene\n        0xA407 : \"GainControl\",             // Degree of overall image gain adjustment\n        0xA408 : \"Contrast\",                // Direction of contrast processing applied by camera\n        0xA409 : \"Saturation\",              // Direction of saturation processing applied by camera\n        0xA40A : \"Sharpness\",               // Direction of sharpness processing applied by camera\n        0xA40B : \"DeviceSettingDescription\",    //\n        0xA40C : \"SubjectDistanceRange\",    // Distance to subject\n\n        // other tags\n        0xA005 : \"InteroperabilityIFDPointer\",\n        0xA420 : \"ImageUniqueID\"            // Identifier assigned uniquely to each image\n    };\n\n    var TiffTags = EXIF.TiffTags = {\n        0x0100 : \"ImageWidth\",\n        0x0101 : \"ImageHeight\",\n        0x8769 : \"ExifIFDPointer\",\n        0x8825 : \"GPSInfoIFDPointer\",\n        0xA005 : \"InteroperabilityIFDPointer\",\n        0x0102 : \"BitsPerSample\",\n        0x0103 : \"Compression\",\n        0x0106 : \"PhotometricInterpretation\",\n        0x0112 : \"Orientation\",\n        0x0115 : \"SamplesPerPixel\",\n        0x011C : \"PlanarConfiguration\",\n        0x0212 : \"YCbCrSubSampling\",\n        0x0213 : \"YCbCrPositioning\",\n        0x011A : \"XResolution\",\n        0x011B : \"YResolution\",\n        0x0128 : \"ResolutionUnit\",\n        0x0111 : \"StripOffsets\",\n        0x0116 : \"RowsPerStrip\",\n        0x0117 : \"StripByteCounts\",\n        0x0201 : \"JPEGInterchangeFormat\",\n        0x0202 : \"JPEGInterchangeFormatLength\",\n        0x012D : \"TransferFunction\",\n        0x013E : \"WhitePoint\",\n        0x013F : \"PrimaryChromaticities\",\n        0x0211 : \"YCbCrCoefficients\",\n        0x0214 : \"ReferenceBlackWhite\",\n        0x0132 : \"DateTime\",\n        0x010E : \"ImageDescription\",\n        0x010F : \"Make\",\n        0x0110 : \"Model\",\n        0x0131 : \"Software\",\n        0x013B : \"Artist\",\n        0x8298 : \"Copyright\"\n    };\n\n    var GPSTags = EXIF.GPSTags = {\n        0x0000 : \"GPSVersionID\",\n        0x0001 : \"GPSLatitudeRef\",\n        0x0002 : \"GPSLatitude\",\n        0x0003 : \"GPSLongitudeRef\",\n        0x0004 : \"GPSLongitude\",\n        0x0005 : \"GPSAltitudeRef\",\n        0x0006 : \"GPSAltitude\",\n        0x0007 : \"GPSTimeStamp\",\n        0x0008 : \"GPSSatellites\",\n        0x0009 : \"GPSStatus\",\n        0x000A : \"GPSMeasureMode\",\n        0x000B : \"GPSDOP\",\n        0x000C : \"GPSSpeedRef\",\n        0x000D : \"GPSSpeed\",\n        0x000E : \"GPSTrackRef\",\n        0x000F : \"GPSTrack\",\n        0x0010 : \"GPSImgDirectionRef\",\n        0x0011 : \"GPSImgDirection\",\n        0x0012 : \"GPSMapDatum\",\n        0x0013 : \"GPSDestLatitudeRef\",\n        0x0014 : \"GPSDestLatitude\",\n        0x0015 : \"GPSDestLongitudeRef\",\n        0x0016 : \"GPSDestLongitude\",\n        0x0017 : \"GPSDestBearingRef\",\n        0x0018 : \"GPSDestBearing\",\n        0x0019 : \"GPSDestDistanceRef\",\n        0x001A : \"GPSDestDistance\",\n        0x001B : \"GPSProcessingMethod\",\n        0x001C : \"GPSAreaInformation\",\n        0x001D : \"GPSDateStamp\",\n        0x001E : \"GPSDifferential\"\n    };\n\n     // EXIF 2.3 Spec\n    var IFD1Tags = EXIF.IFD1Tags = {\n        0x0100: \"ImageWidth\",\n        0x0101: \"ImageHeight\",\n        0x0102: \"BitsPerSample\",\n        0x0103: \"Compression\",\n        0x0106: \"PhotometricInterpretation\",\n        0x0111: \"StripOffsets\",\n        0x0112: \"Orientation\",\n        0x0115: \"SamplesPerPixel\",\n        0x0116: \"RowsPerStrip\",\n        0x0117: \"StripByteCounts\",\n        0x011A: \"XResolution\",\n        0x011B: \"YResolution\",\n        0x011C: \"PlanarConfiguration\",\n        0x0128: \"ResolutionUnit\",\n        0x0201: \"JpegIFOffset\",    // When image format is JPEG, this value show offset to JPEG data stored.(aka \"ThumbnailOffset\" or \"JPEGInterchangeFormat\")\n        0x0202: \"JpegIFByteCount\", // When image format is JPEG, this value shows data size of JPEG image (aka \"ThumbnailLength\" or \"JPEGInterchangeFormatLength\")\n        0x0211: \"YCbCrCoefficients\",\n        0x0212: \"YCbCrSubSampling\",\n        0x0213: \"YCbCrPositioning\",\n        0x0214: \"ReferenceBlackWhite\"\n    };\n\n    var StringValues = EXIF.StringValues = {\n        ExposureProgram : {\n            0 : \"Not defined\",\n            1 : \"Manual\",\n            2 : \"Normal program\",\n            3 : \"Aperture priority\",\n            4 : \"Shutter priority\",\n            5 : \"Creative program\",\n            6 : \"Action program\",\n            7 : \"Portrait mode\",\n            8 : \"Landscape mode\"\n        },\n        MeteringMode : {\n            0 : \"Unknown\",\n            1 : \"Average\",\n            2 : \"CenterWeightedAverage\",\n            3 : \"Spot\",\n            4 : \"MultiSpot\",\n            5 : \"Pattern\",\n            6 : \"Partial\",\n            255 : \"Other\"\n        },\n        LightSource : {\n            0 : \"Unknown\",\n            1 : \"Daylight\",\n            2 : \"Fluorescent\",\n            3 : \"Tungsten (incandescent light)\",\n            4 : \"Flash\",\n            9 : \"Fine weather\",\n            10 : \"Cloudy weather\",\n            11 : \"Shade\",\n            12 : \"Daylight fluorescent (D 5700 - 7100K)\",\n            13 : \"Day white fluorescent (N 4600 - 5400K)\",\n            14 : \"Cool white fluorescent (W 3900 - 4500K)\",\n            15 : \"White fluorescent (WW 3200 - 3700K)\",\n            17 : \"Standard light A\",\n            18 : \"Standard light B\",\n            19 : \"Standard light C\",\n            20 : \"D55\",\n            21 : \"D65\",\n            22 : \"D75\",\n            23 : \"D50\",\n            24 : \"ISO studio tungsten\",\n            255 : \"Other\"\n        },\n        Flash : {\n            0x0000 : \"Flash did not fire\",\n            0x0001 : \"Flash fired\",\n            0x0005 : \"Strobe return light not detected\",\n            0x0007 : \"Strobe return light detected\",\n            0x0009 : \"Flash fired, compulsory flash mode\",\n            0x000D : \"Flash fired, compulsory flash mode, return light not detected\",\n            0x000F : \"Flash fired, compulsory flash mode, return light detected\",\n            0x0010 : \"Flash did not fire, compulsory flash mode\",\n            0x0018 : \"Flash did not fire, auto mode\",\n            0x0019 : \"Flash fired, auto mode\",\n            0x001D : \"Flash fired, auto mode, return light not detected\",\n            0x001F : \"Flash fired, auto mode, return light detected\",\n            0x0020 : \"No flash function\",\n            0x0041 : \"Flash fired, red-eye reduction mode\",\n            0x0045 : \"Flash fired, red-eye reduction mode, return light not detected\",\n            0x0047 : \"Flash fired, red-eye reduction mode, return light detected\",\n            0x0049 : \"Flash fired, compulsory flash mode, red-eye reduction mode\",\n            0x004D : \"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected\",\n            0x004F : \"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected\",\n            0x0059 : \"Flash fired, auto mode, red-eye reduction mode\",\n            0x005D : \"Flash fired, auto mode, return light not detected, red-eye reduction mode\",\n            0x005F : \"Flash fired, auto mode, return light detected, red-eye reduction mode\"\n        },\n        SensingMethod : {\n            1 : \"Not defined\",\n            2 : \"One-chip color area sensor\",\n            3 : \"Two-chip color area sensor\",\n            4 : \"Three-chip color area sensor\",\n            5 : \"Color sequential area sensor\",\n            7 : \"Trilinear sensor\",\n            8 : \"Color sequential linear sensor\"\n        },\n        SceneCaptureType : {\n            0 : \"Standard\",\n            1 : \"Landscape\",\n            2 : \"Portrait\",\n            3 : \"Night scene\"\n        },\n        SceneType : {\n            1 : \"Directly photographed\"\n        },\n        CustomRendered : {\n            0 : \"Normal process\",\n            1 : \"Custom process\"\n        },\n        WhiteBalance : {\n            0 : \"Auto white balance\",\n            1 : \"Manual white balance\"\n        },\n        GainControl : {\n            0 : \"None\",\n            1 : \"Low gain up\",\n            2 : \"High gain up\",\n            3 : \"Low gain down\",\n            4 : \"High gain down\"\n        },\n        Contrast : {\n            0 : \"Normal\",\n            1 : \"Soft\",\n            2 : \"Hard\"\n        },\n        Saturation : {\n            0 : \"Normal\",\n            1 : \"Low saturation\",\n            2 : \"High saturation\"\n        },\n        Sharpness : {\n            0 : \"Normal\",\n            1 : \"Soft\",\n            2 : \"Hard\"\n        },\n        SubjectDistanceRange : {\n            0 : \"Unknown\",\n            1 : \"Macro\",\n            2 : \"Close view\",\n            3 : \"Distant view\"\n        },\n        FileSource : {\n            3 : \"DSC\"\n        },\n\n        Components : {\n            0 : \"\",\n            1 : \"Y\",\n            2 : \"Cb\",\n            3 : \"Cr\",\n            4 : \"R\",\n            5 : \"G\",\n            6 : \"B\"\n        }\n    };\n\n    function addEvent(element, event, handler) {\n        if (element.addEventListener) {\n            element.addEventListener(event, handler, false);\n        } else if (element.attachEvent) {\n            element.attachEvent(\"on\" + event, handler);\n        }\n    }\n\n    function imageHasData(img) {\n        return !!(img.exifdata);\n    }\n\n\n    function base64ToArrayBuffer(base64, contentType) {\n        contentType = contentType || base64.match(/^data\\:([^\\;]+)\\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'\n        base64 = base64.replace(/^data\\:([^\\;]+)\\;base64,/gmi, '');\n        var binary = atob(base64);\n        var len = binary.length;\n        var buffer = new ArrayBuffer(len);\n        var view = new Uint8Array(buffer);\n        for (var i = 0; i < len; i++) {\n            view[i] = binary.charCodeAt(i);\n        }\n        return buffer;\n    }\n\n    function objectURLToBlob(url, callback) {\n        var http = new XMLHttpRequest();\n        http.open(\"GET\", url, true);\n        http.responseType = \"blob\";\n        http.onload = function(e) {\n            if (this.status == 200 || this.status === 0) {\n                callback(this.response);\n            }\n        };\n        http.send();\n    }\n\n    function getImageData(img, callback) {\n        function handleBinaryFile(binFile) {\n            var data = findEXIFinJPEG(binFile);\n            img.exifdata = data || {};\n            var iptcdata = findIPTCinJPEG(binFile);\n            img.iptcdata = iptcdata || {};\n            if (EXIF.isXmpEnabled) {\n               var xmpdata= findXMPinJPEG(binFile);\n               img.xmpdata = xmpdata || {};               \n            }\n            if (callback) {\n                callback.call(img);\n            }\n        }\n\n        if (img.src) {\n            if (/^data\\:/i.test(img.src)) { // Data URI\n                var arrayBuffer = base64ToArrayBuffer(img.src);\n                handleBinaryFile(arrayBuffer);\n\n            } else if (/^blob\\:/i.test(img.src)) { // Object URL\n                var fileReader = new FileReader();\n                fileReader.onload = function(e) {\n                    handleBinaryFile(e.target.result);\n                };\n                objectURLToBlob(img.src, function (blob) {\n                    fileReader.readAsArrayBuffer(blob);\n                });\n            } else {\n                var http = new XMLHttpRequest();\n                http.onload = function() {\n                    if (this.status == 200 || this.status === 0) {\n                        handleBinaryFile(http.response);\n                    } else {\n                        throw \"Could not load image\";\n                    }\n                    http = null;\n                };\n                http.open(\"GET\", img.src, true);\n                http.responseType = \"arraybuffer\";\n                http.send(null);\n            }\n        } else if (self.FileReader && (img instanceof self.Blob || img instanceof self.File)) {\n            var fileReader = new FileReader();\n            fileReader.onload = function(e) {\n                if (debug) console.log(\"Got file of length \" + e.target.result.byteLength);\n                handleBinaryFile(e.target.result);\n            };\n\n            fileReader.readAsArrayBuffer(img);\n        }\n    }\n\n    function findEXIFinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength,\n            marker;\n\n        while (offset < length) {\n            if (dataView.getUint8(offset) != 0xFF) {\n                if (debug) console.log(\"Not a valid marker at offset \" + offset + \", found: \" + dataView.getUint8(offset));\n                return false; // not a valid marker, something is wrong\n            }\n\n            marker = dataView.getUint8(offset + 1);\n            if (debug) console.log(marker);\n\n            // we could implement handling for other markers here,\n            // but we're only looking for 0xFFE1 for EXIF data\n\n            if (marker == 225) {\n                if (debug) console.log(\"Found 0xFFE1 marker\");\n\n                return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);\n\n                // offset += 2 + file.getShortAt(offset+2, true);\n\n            } else {\n                offset += 2 + dataView.getUint16(offset+2);\n            }\n\n        }\n\n    }\n\n    function findIPTCinJPEG(file) {\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n            if (debug) console.log(\"Not a valid JPEG\");\n            return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength;\n\n\n        var isFieldSegmentStart = function(dataView, offset){\n            return (\n                dataView.getUint8(offset) === 0x38 &&\n                dataView.getUint8(offset+1) === 0x42 &&\n                dataView.getUint8(offset+2) === 0x49 &&\n                dataView.getUint8(offset+3) === 0x4D &&\n                dataView.getUint8(offset+4) === 0x04 &&\n                dataView.getUint8(offset+5) === 0x04\n            );\n        };\n\n        while (offset < length) {\n\n            if ( isFieldSegmentStart(dataView, offset )){\n\n                // Get the length of the name header (which is padded to an even number of bytes)\n                var nameHeaderLength = dataView.getUint8(offset+7);\n                if(nameHeaderLength % 2 !== 0) nameHeaderLength += 1;\n                // Check for pre photoshop 6 format\n                if(nameHeaderLength === 0) {\n                    // Always 4\n                    nameHeaderLength = 4;\n                }\n\n                var startOffset = offset + 8 + nameHeaderLength;\n                var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);\n\n                return readIPTCData(file, startOffset, sectionLength);\n\n                break;\n\n            }\n\n\n            // Not the marker, continue searching\n            offset++;\n\n        }\n\n    }\n    var IptcFieldMap = {\n        0x78 : 'caption',\n        0x6E : 'credit',\n        0x19 : 'keywords',\n        0x37 : 'dateCreated',\n        0x50 : 'byline',\n        0x55 : 'bylineTitle',\n        0x7A : 'captionWriter',\n        0x69 : 'headline',\n        0x74 : 'copyright',\n        0x0F : 'category'\n    };\n    function readIPTCData(file, startOffset, sectionLength){\n        var dataView = new DataView(file);\n        var data = {};\n        var fieldValue, fieldName, dataSize, segmentType, segmentSize;\n        var segmentStartPos = startOffset;\n        while(segmentStartPos < startOffset+sectionLength) {\n            if(dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos+1) === 0x02){\n                segmentType = dataView.getUint8(segmentStartPos+2);\n                if(segmentType in IptcFieldMap) {\n                    dataSize = dataView.getInt16(segmentStartPos+3);\n                    segmentSize = dataSize + 5;\n                    fieldName = IptcFieldMap[segmentType];\n                    fieldValue = getStringFromDB(dataView, segmentStartPos+5, dataSize);\n                    // Check if we already stored a value with this name\n                    if(data.hasOwnProperty(fieldName)) {\n                        // Value already stored with this name, create multivalue field\n                        if(data[fieldName] instanceof Array) {\n                            data[fieldName].push(fieldValue);\n                        }\n                        else {\n                            data[fieldName] = [data[fieldName], fieldValue];\n                        }\n                    }\n                    else {\n                        data[fieldName] = fieldValue;\n                    }\n                }\n\n            }\n            segmentStartPos++;\n        }\n        return data;\n    }\n\n\n\n    function readTags(file, tiffStart, dirStart, strings, bigEnd) {\n        var entries = file.getUint16(dirStart, !bigEnd),\n            tags = {},\n            entryOffset, tag,\n            i;\n\n        for (i=0;i<entries;i++) {\n            entryOffset = dirStart + i*12 + 2;\n            tag = strings[file.getUint16(entryOffset, !bigEnd)];\n            if (!tag && debug) console.log(\"Unknown tag: \" + file.getUint16(entryOffset, !bigEnd));\n            tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);\n        }\n        return tags;\n    }\n\n\n    function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {\n        var type = file.getUint16(entryOffset+2, !bigEnd),\n            numValues = file.getUint32(entryOffset+4, !bigEnd),\n            valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,\n            offset,\n            vals, val, n,\n            numerator, denominator;\n\n        switch (type) {\n            case 1: // byte, 8-bit unsigned int\n            case 7: // undefined, 8-bit byte, value depending on field\n                if (numValues == 1) {\n                    return file.getUint8(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 4 ? valueOffset : (entryOffset + 8);\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint8(offset + n);\n                    }\n                    return vals;\n                }\n\n            case 2: // ascii, 8-bit byte\n                offset = numValues > 4 ? valueOffset : (entryOffset + 8);\n                return getStringFromDB(file, offset, numValues-1);\n\n            case 3: // short, 16 bit int\n                if (numValues == 1) {\n                    return file.getUint16(entryOffset + 8, !bigEnd);\n                } else {\n                    offset = numValues > 2 ? valueOffset : (entryOffset + 8);\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint16(offset + 2*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 4: // long, 32 bit int\n                if (numValues == 1) {\n                    return file.getUint32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 5:    // rational = two long values, first is numerator, second is denominator\n                if (numValues == 1) {\n                    numerator = file.getUint32(valueOffset, !bigEnd);\n                    denominator = file.getUint32(valueOffset+4, !bigEnd);\n                    val = new Number(numerator / denominator);\n                    val.numerator = numerator;\n                    val.denominator = denominator;\n                    return val;\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        numerator = file.getUint32(valueOffset + 8*n, !bigEnd);\n                        denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);\n                        vals[n] = new Number(numerator / denominator);\n                        vals[n].numerator = numerator;\n                        vals[n].denominator = denominator;\n                    }\n                    return vals;\n                }\n\n            case 9: // slong, 32 bit signed int\n                if (numValues == 1) {\n                    return file.getInt32(entryOffset + 8, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);\n                    }\n                    return vals;\n                }\n\n            case 10: // signed rational, two slongs, first is numerator, second is denominator\n                if (numValues == 1) {\n                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);\n                } else {\n                    vals = [];\n                    for (n=0;n<numValues;n++) {\n                        vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);\n                    }\n                    return vals;\n                }\n        }\n    }\n\n    /**\n    * Given an IFD (Image File Directory) start offset\n    * returns an offset to next IFD or 0 if it's the last IFD.\n    */\n    function getNextIFDOffset(dataView, dirStart, bigEnd){\n        //the first 2bytes means the number of directory entries contains in this IFD\n        var entries = dataView.getUint16(dirStart, !bigEnd);\n\n        // After last directory entry, there is a 4bytes of data,\n        // it means an offset to next IFD.\n        // If its value is '0x00000000', it means this is the last IFD and there is no linked IFD.\n\n        return dataView.getUint32(dirStart + 2 + entries * 12, !bigEnd); // each entry is 12 bytes long\n    }\n\n    function readThumbnailImage(dataView, tiffStart, firstIFDOffset, bigEnd){\n        // get the IFD1 offset\n        var IFD1OffsetPointer = getNextIFDOffset(dataView, tiffStart+firstIFDOffset, bigEnd);\n\n        if (!IFD1OffsetPointer) {\n            // console.log('******** IFD1Offset is empty, image thumb not found ********');\n            return {};\n        }\n        else if (IFD1OffsetPointer > dataView.byteLength) { // this should not happen\n            // console.log('******** IFD1Offset is outside the bounds of the DataView ********');\n            return {};\n        }\n        // console.log('*******  thumbnail IFD offset (IFD1) is: %s', IFD1OffsetPointer);\n\n        var thumbTags = readTags(dataView, tiffStart, tiffStart + IFD1OffsetPointer, IFD1Tags, bigEnd)\n\n        // EXIF 2.3 specification for JPEG format thumbnail\n\n        // If the value of Compression(0x0103) Tag in IFD1 is '6', thumbnail image format is JPEG.\n        // Most of Exif image uses JPEG format for thumbnail. In that case, you can get offset of thumbnail\n        // by JpegIFOffset(0x0201) Tag in IFD1, size of thumbnail by JpegIFByteCount(0x0202) Tag.\n        // Data format is ordinary JPEG format, starts from 0xFFD8 and ends by 0xFFD9. It seems that\n        // JPEG format and 160x120pixels of size are recommended thumbnail format for Exif2.1 or later.\n\n        if (thumbTags['Compression']) {\n            // console.log('Thumbnail image found!');\n\n            switch (thumbTags['Compression']) {\n                case 6:\n                    // console.log('Thumbnail image format is JPEG');\n                    if (thumbTags.JpegIFOffset && thumbTags.JpegIFByteCount) {\n                    // extract the thumbnail\n                        var tOffset = tiffStart + thumbTags.JpegIFOffset;\n                        var tLength = thumbTags.JpegIFByteCount;\n                        thumbTags['blob'] = new Blob([new Uint8Array(dataView.buffer, tOffset, tLength)], {\n                            type: 'image/jpeg'\n                        });\n                    }\n                break;\n\n            case 1:\n                console.log(\"Thumbnail image format is TIFF, which is not implemented.\");\n                break;\n            default:\n                console.log(\"Unknown thumbnail image format '%s'\", thumbTags['Compression']);\n            }\n        }\n        else if (thumbTags['PhotometricInterpretation'] == 2) {\n            console.log(\"Thumbnail image format is RGB, which is not implemented.\");\n        }\n        return thumbTags;\n    }\n\n    function getStringFromDB(buffer, start, length) {\n        var outstr = \"\";\n        for (n = start; n < start+length; n++) {\n            outstr += String.fromCharCode(buffer.getUint8(n));\n        }\n        return outstr;\n    }\n\n    function readEXIFData(file, start) {\n        if (getStringFromDB(file, start, 4) != \"Exif\") {\n            if (debug) console.log(\"Not valid EXIF data! \" + getStringFromDB(file, start, 4));\n            return false;\n        }\n\n        var bigEnd,\n            tags, tag,\n            exifData, gpsData,\n            tiffOffset = start + 6;\n\n        // test for TIFF validity and endianness\n        if (file.getUint16(tiffOffset) == 0x4949) {\n            bigEnd = false;\n        } else if (file.getUint16(tiffOffset) == 0x4D4D) {\n            bigEnd = true;\n        } else {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x4949 or 0x4D4D)\");\n            return false;\n        }\n\n        if (file.getUint16(tiffOffset+2, !bigEnd) != 0x002A) {\n            if (debug) console.log(\"Not valid TIFF data! (no 0x002A)\");\n            return false;\n        }\n\n        var firstIFDOffset = file.getUint32(tiffOffset+4, !bigEnd);\n\n        if (firstIFDOffset < 0x00000008) {\n            if (debug) console.log(\"Not valid TIFF data! (First offset less than 8)\", file.getUint32(tiffOffset+4, !bigEnd));\n            return false;\n        }\n\n        tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);\n\n        if (tags.ExifIFDPointer) {\n            exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);\n            for (tag in exifData) {\n                switch (tag) {\n                    case \"LightSource\" :\n                    case \"Flash\" :\n                    case \"MeteringMode\" :\n                    case \"ExposureProgram\" :\n                    case \"SensingMethod\" :\n                    case \"SceneCaptureType\" :\n                    case \"SceneType\" :\n                    case \"CustomRendered\" :\n                    case \"WhiteBalance\" :\n                    case \"GainControl\" :\n                    case \"Contrast\" :\n                    case \"Saturation\" :\n                    case \"Sharpness\" :\n                    case \"SubjectDistanceRange\" :\n                    case \"FileSource\" :\n                        exifData[tag] = StringValues[tag][exifData[tag]];\n                        break;\n\n                    case \"ExifVersion\" :\n                    case \"FlashpixVersion\" :\n                        exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);\n                        break;\n\n                    case \"ComponentsConfiguration\" :\n                        exifData[tag] =\n                            StringValues.Components[exifData[tag][0]] +\n                            StringValues.Components[exifData[tag][1]] +\n                            StringValues.Components[exifData[tag][2]] +\n                            StringValues.Components[exifData[tag][3]];\n                        break;\n                }\n                tags[tag] = exifData[tag];\n            }\n        }\n\n        if (tags.GPSInfoIFDPointer) {\n            gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);\n            for (tag in gpsData) {\n                switch (tag) {\n                    case \"GPSVersionID\" :\n                        gpsData[tag] = gpsData[tag][0] +\n                            \".\" + gpsData[tag][1] +\n                            \".\" + gpsData[tag][2] +\n                            \".\" + gpsData[tag][3];\n                        break;\n                }\n                tags[tag] = gpsData[tag];\n            }\n        }\n\n        // extract thumbnail\n        tags['thumbnail'] = readThumbnailImage(file, tiffOffset, firstIFDOffset, bigEnd);\n\n        return tags;\n    }\n\n   function findXMPinJPEG(file) {\n\n        if (!('DOMParser' in self)) {\n            // console.warn('XML parsing not supported without DOMParser');\n            return;\n        }\n        var dataView = new DataView(file);\n\n        if (debug) console.log(\"Got file of length \" + file.byteLength);\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n           if (debug) console.log(\"Not a valid JPEG\");\n           return false; // not a valid jpeg\n        }\n\n        var offset = 2,\n            length = file.byteLength,\n            dom = new DOMParser();\n\n        while (offset < (length-4)) {\n            if (getStringFromDB(dataView, offset, 4) == \"http\") {\n                var startOffset = offset - 1;\n                var sectionLength = dataView.getUint16(offset - 2) - 1;\n                var xmpString = getStringFromDB(dataView, startOffset, sectionLength)\n                var xmpEndIndex = xmpString.indexOf('xmpmeta>') + 8;\n                xmpString = xmpString.substring( xmpString.indexOf( '<x:xmpmeta' ), xmpEndIndex );\n\n                var indexOfXmp = xmpString.indexOf('x:xmpmeta') + 10\n                //Many custom written programs embed xmp/xml without any namespace. Following are some of them.\n                //Without these namespaces, XML is thought to be invalid by parsers\n                xmpString = xmpString.slice(0, indexOfXmp)\n                            + 'xmlns:Iptc4xmpCore=\"http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/\" '\n                            + 'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" '\n                            + 'xmlns:tiff=\"http://ns.adobe.com/tiff/1.0/\" '\n                            + 'xmlns:plus=\"http://schemas.android.com/apk/lib/com.google.android.gms.plus\" '\n                            + 'xmlns:ext=\"http://www.gettyimages.com/xsltExtension/1.0\" '\n                            + 'xmlns:exif=\"http://ns.adobe.com/exif/1.0/\" '\n                            + 'xmlns:stEvt=\"http://ns.adobe.com/xap/1.0/sType/ResourceEvent#\" '\n                            + 'xmlns:stRef=\"http://ns.adobe.com/xap/1.0/sType/ResourceRef#\" '\n                            + 'xmlns:crs=\"http://ns.adobe.com/camera-raw-settings/1.0/\" '\n                            + 'xmlns:xapGImg=\"http://ns.adobe.com/xap/1.0/g/img/\" '\n                            + 'xmlns:Iptc4xmpExt=\"http://iptc.org/std/Iptc4xmpExt/2008-02-29/\" '\n                            + xmpString.slice(indexOfXmp)\n\n                var domDocument = dom.parseFromString( xmpString, 'text/xml' );\n                return xml2Object(domDocument);\n            } else{\n             offset++;\n            }\n        }\n    }\n\n    function xml2json(xml) {\n        var json = {};\n      \n        if (xml.nodeType == 1) { // element node\n          if (xml.attributes.length > 0) {\n            json['@attributes'] = {};\n            for (var j = 0; j < xml.attributes.length; j++) {\n              var attribute = xml.attributes.item(j);\n              json['@attributes'][attribute.nodeName] = attribute.nodeValue;\n            }\n          }\n        } else if (xml.nodeType == 3) { // text node\n          return xml.nodeValue;\n        }\n      \n        // deal with children\n        if (xml.hasChildNodes()) {\n          for(var i = 0; i < xml.childNodes.length; i++) {\n            var child = xml.childNodes.item(i);\n            var nodeName = child.nodeName;\n            if (json[nodeName] == null) {\n              json[nodeName] = xml2json(child);\n            } else {\n              if (json[nodeName].push == null) {\n                var old = json[nodeName];\n                json[nodeName] = [];\n                json[nodeName].push(old);\n              }\n              json[nodeName].push(xml2json(child));\n            }\n          }\n        }\n        \n        return json;\n    }\n\n    function xml2Object(xml) {\n        try {\n            var obj = {};\n            if (xml.children.length > 0) {\n              for (var i = 0; i < xml.children.length; i++) {\n                var item = xml.children.item(i);\n                var attributes = item.attributes;\n                for(var idx in attributes) {\n                    var itemAtt = attributes[idx];\n                    var dataKey = itemAtt.nodeName;\n                    var dataValue = itemAtt.nodeValue;\n\n                    if(dataKey !== undefined) {\n                        obj[dataKey] = dataValue;\n                    }\n                }\n                var nodeName = item.nodeName;\n\n                if (typeof (obj[nodeName]) == \"undefined\") {\n                  obj[nodeName] = xml2json(item);\n                } else {\n                  if (typeof (obj[nodeName].push) == \"undefined\") {\n                    var old = obj[nodeName];\n\n                    obj[nodeName] = [];\n                    obj[nodeName].push(old);\n                  }\n                  obj[nodeName].push(xml2json(item));\n                }\n              }\n            } else {\n              obj = xml.textContent;\n            }\n            return obj;\n          } catch (e) {\n              console.log(e.message);\n          }\n    }\n\n    EXIF.enableXmp = function() {\n        EXIF.isXmpEnabled = true;\n    }\n\n    EXIF.disableXmp = function() {\n        EXIF.isXmpEnabled = false;\n    }\n\n    EXIF.getData = function(img, callback) {\n        if (((self.Image && img instanceof self.Image)\n            || (self.HTMLImageElement && img instanceof self.HTMLImageElement))\n            && !img.complete)\n            return false;\n\n        if (!imageHasData(img)) {\n            getImageData(img, callback);\n        } else {\n            if (callback) {\n                callback.call(img);\n            }\n        }\n        return true;\n    }\n\n    EXIF.getTag = function(img, tag) {\n        if (!imageHasData(img)) return;\n        return img.exifdata[tag];\n    }\n    \n    EXIF.getIptcTag = function(img, tag) {\n        if (!imageHasData(img)) return;\n        return img.iptcdata[tag];\n    }\n\n    EXIF.getAllTags = function(img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.exifdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    }\n    \n    EXIF.getAllIptcTags = function(img) {\n        if (!imageHasData(img)) return {};\n        var a,\n            data = img.iptcdata,\n            tags = {};\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                tags[a] = data[a];\n            }\n        }\n        return tags;\n    }\n\n    EXIF.pretty = function(img) {\n        if (!imageHasData(img)) return \"\";\n        var a,\n            data = img.exifdata,\n            strPretty = \"\";\n        for (a in data) {\n            if (data.hasOwnProperty(a)) {\n                if (typeof data[a] == \"object\") {\n                    if (data[a] instanceof Number) {\n                        strPretty += a + \" : \" + data[a] + \" [\" + data[a].numerator + \"/\" + data[a].denominator + \"]\\r\\n\";\n                    } else {\n                        strPretty += a + \" : [\" + data[a].length + \" values]\\r\\n\";\n                    }\n                } else {\n                    strPretty += a + \" : \" + data[a] + \"\\r\\n\";\n                }\n            }\n        }\n        return strPretty;\n    }\n\n    EXIF.readFromBinaryFile = function(file) {\n        return findEXIFinJPEG(file);\n    }\n\n    if (typeof define === 'function' && define.amd) {\n        define('exif-js', [], function() {\n            return EXIF;\n        });\n    }\n}.call(this));\n\n","<!--  -->\n<template>\n  <div class=\"vquick-cropper\">\n    <!-- <img ref=\"img\" :src=\"imgSrcs\"  alt=\"\"> -->\n\n    <canvas ref=\"canvas\"></canvas>\n    <!-- <canvas ref=\"canvas2\" width=\"300\" height=\"300\"></canvas> -->\n  </div>\n</template>\n\n<script>\nimport exif from \"exif-js\";\nexport default {\n  props: {\n    imgSrc: {},\n    imgType:{\n      default:'png'\n    },\n  },\n  data() {\n    return {\n      imgSrcs:'',  // canvas渲染的图片\n      ctx: {},    // canvas实例\n      img: {},    // img实例\n      width: 0,   // canvas宽\n      height: 0, // canvas高\n      imgWidth: 0,  //图片宽度\n      imgHeight: 0,  // 图片高度\n      startScreen: undefined, // 触摸点坐标\n      endScreen: { x: 0, y: 0 }, // 结束触摸点坐标\n      posImg: { x: 0, y: 0 }, // 照片移动的距离\n      imageData: {}, // 裁剪区域的canvas信息值\n      base64: \"\", // 头像的base64\n      data:[],  // 头像的二进值\n      isMove: true, // 是否能拖动图片\n      scaleStart: {  // 双指开始触摸点\n        x1: 0,\n        y1: 0,\n        x2: 0,\n        y2: 0\n      },\n      scaleMove: { // 双指结束触摸点\n        x1: 0,\n        y1: 0,\n        x2: 0,\n        y2: 0\n      },\n      widthRate: 1,  // 图片缩放比例\n      endImgWidth: 0,  // 图片最后宽度\n      endImgHeight: 0 // 图片最后高度\n    };\n  },\n\n  components: {},\n\n  computed: {},\n  watch: {},\n  mounted() {\n    // this.init();\n  },\n\n  methods: {\n    // 确认按钮\n    confirm() {\n      const rectWidth = this.width * 0.8;\n      const rectHeight = this.height * 0.8;\n      const rectX = this.width * 0.1;\n      const rectY = (this.height - rectWidth) / 2;\n      this.drawHeader(\n        this.ctx,\n        this.img,\n        -this.posImg.x + rectX,\n        -this.posImg.y + rectY\n      );\n    },\n    // 判断图片方向\n    imgDirection() {\n      this.$nextTick(() => {\n        const img = new Image();\n        img.src = this.imgSrc;\n\n        let rate = 1;\n\n        img.onload = () => {\n          // 获得图片方向\n          exif.getData(img, () => {\n            this.orientation = exif.getTag(img, \"Orientation\");\n          });\n          // 6说明是正向的手机相片  \n          if (this.orientation == 6) {\n            // undefined证明不是手机拍照相片为网络图片不做处理\n          } else {\n            this.imgSrcs = this.imgSrc;\n            this.initCanvas();\n            return;\n          }\n          const width = this.$el.getBoundingClientRect().width;\n          const height = this.$el.getBoundingClientRect().height;\n          const canvas3 = document.createElement(\"canvas\");\n          const ctx3 = canvas3.getContext(\"2d\");\n          const fwidth = img.height;\n          const fheight = img.width\n\n          // 如果是相机图片则旋转90度\n          if (fwidth / width > 1) {\n            rate = fwidth / width;\n          }\n\n          const imgWidth = fwidth / rate;\n          const imgHeight = fheight / rate;\n          \n          \n          canvas3.width = imgWidth; \n          canvas3.height = imgHeight; \n\n          ctx3.translate(0.5 * imgWidth, 0.5 * imgHeight);\n          ctx3.rotate(90 * Math.PI / 180);\n          ctx3.translate(-0.5 * imgHeight, -0.5 * imgWidth);\n\n          ctx3.drawImage(img, 0, 0, imgHeight, imgWidth);\n          \n          const base64 = canvas3.toDataURL();\n          this.imgSrcs = base64;\n          this.initCanvas();\n        };\n      });\n    },\n    // 初始化canvas\n    initCanvas() {\n      this.$nextTick(() => {\n        const C = this.$refs.canvas;\n        // 宽高等于容器宽高\n        C.width = this.$el.getBoundingClientRect().width;\n        C.height = this.$el.getBoundingClientRect().height;\n\n        const ctx = C.getContext(\"2d\");\n\n        const img = new Image();\n\n        img.src = this.imgSrcs;\n        this.ctx = ctx;\n        this.img = img;\n        this.width = C.width;\n        this.height = C.height;\n        let rate = 1;\n\n        img.onload = () => {\n     \n          rate = img.width / (C.width * 0.8);\n\n          const rectWidth = this.width * 0.8;\n          const rectHeight = this.height * 0.8;\n          const rectX = this.width * 0.1;\n          const rectY = (this.height - rectWidth) / 2;\n          this.imgWidth = img.width / rate;\n          this.imgHeight = img.height / rate;\n          this.posImg = {x:rectX,y:rectY}\n         \n          this.drawImg(ctx, img, rectX, rectY, this.imgWidth, this.imgHeight);\n          // 裁剪框\n          this.drawRect();\n        };\n      });\n    },\n    // 画图像\n    drawImg(ctx, img, x, y, width, height) {\n      this.drawClear(ctx);\n      ctx.drawImage(img, x, y, width, height);\n\n      this.drawRect();\n    },\n    // 裁剪头像\n    drawHeader(ctx, img, x, y, width, height) {\n      this.isMove = false;\n      const rectWidth = this.width * 0.8;\n      const rectHeight = this.height * 0.8;\n      const rectX = this.width * 0.1;\n      const rectY = (this.height - rectWidth) / 2;\n      this.drawClear();\n      ctx.drawImage(\n        img,\n        (-this.posImg.x + rectX) * (this.img.width / this.imgWidth),\n        (-this.posImg.y + rectY) * (this.img.width / this.imgWidth),\n        rectWidth * (this.img.width / this.imgWidth),\n        rectWidth * (this.img.width / this.imgWidth),\n        rectX,\n        rectY,\n        rectWidth,\n        rectWidth\n      );\n\n      this.imageData = ctx.getImageData(rectX, rectY, rectWidth, rectWidth);\n\n      this.makeHeader(rectWidth);\n      this.drawRect();\n    },\n    // 画剪切框\n    drawRect() {\n      const rectWidth = this.width * 0.8;\n      const rectHeight = this.height * 0.8;\n      const rectX = this.width * 0.1;\n      const rectY = (this.height - rectWidth) / 2;\n\n      this.ctx.fillStyle = \"rgba(0,0,0,.3)\";\n      this.ctx.fillRect(0, 0, this.width, rectY);\n      this.ctx.fillRect(0, rectY, rectX, rectWidth);\n      this.ctx.fillRect(rectX+rectWidth, rectY, rectX, rectWidth);\n      this.ctx.fillRect(0, rectY+rectWidth, this.width, this.height);\n      \n      this.ctx.strokeStyle = \"#fff\";\n      this.ctx.lineWidth = \".5\";\n      this.ctx.strokeRect(rectX, rectY, rectWidth, rectWidth);\n    },\n    // 清楚画布\n    drawClear(ctx = this.ctx) {\n      ctx.clearRect(0, 0, this.width, this.height);\n    },\n    // 生成base64\n    makeHeader(rectWidth) {\n      const canvas2 = document.createElement(\"canvas\");\n      const ctx2 = canvas2.getContext(\"2d\");\n      canvas2.width = rectWidth;\n      canvas2.height = rectWidth;\n      ctx2.putImageData(this.imageData, 0, 0);\n      const base64 = canvas2.toDataURL('image/' + this.imgType);\n      this.data = this.convertBase64UrlToBlob(base64);\n      this.base64 = base64;\n      this.$emit('finish',this.base64,this.data)\n    },\n    // 获得base64\n    getBase64Url() {\n      return this.base64;\n    },\n    // 获得二进制数据\n    getData(){\n      return this.data\n    },\n    // base64转blob\n    convertBase64UrlToBlob(urlData){\n       var bytes=window.atob(urlData.split(',')[1]);        //去掉url的头，并转换为byte\n       //处理异常,将ascii码小于0的转换为大于0\n       var ab = new ArrayBuffer(bytes.length);\n       var ia = new Uint8Array(ab);\n       for (var i = 0; i < bytes.length; i++) {\n           ia[i] = bytes.charCodeAt(i);\n       }\n       return new Blob( [ab] , {type : 'image/png'});\n   },\n    // 初始化\n    init() {\n      this.imgDirection();\n      this.bindTouchEvents();\n      this.isMove = true\n    },\n    bindTouchEvents() {\n      this.$refs.canvas.addEventListener(\"touchstart\", this.handleTouchStart);\n      this.$refs.canvas.addEventListener(\"touchmove\", this.handleTouchMove);\n      this.$refs.canvas.addEventListener(\"touchend\", this.handleTouchEnd);\n    },\n    handleTouchStart(e) {\n      if (!this.isMove) return;\n      if (e.touches.length == 1) {\n        let x = e.touches[0].screenX;\n        let y = e.touches[0].screenY;\n          this.startScreen = { x, y };\n      }\n\n      if (e.touches.length == 2) {\n        // 以左面手指位置为准\n        let x =\n          e.touches[0].screenX <= e.touches[1].screenX\n            ? e.touches[0].screenX\n            : e.touches[1].screenX;\n        let y =\n          e.touches[0].screenX <= e.touches[1].screenX\n            ? e.touches[0].screenY\n            : e.touches[1].screenY;\n        this.startScreen = { x, y };\n        this.scaleStart = {\n          x1: e.touches[0].screenX,\n          y1: e.touches[0].screenY,\n          x2: e.touches[1].screenX,\n          y2: e.touches[1].screenY\n        };\n      }\n      // 重制最后图片大小等于现在图片大小\n      this.widthRate = 1;\n      this.endImgWidth = this.imgWidth;\n      this.endImgHeight = this.imgHeight;\n    },\n    handleTouchMove(e) {\n      e.preventDefault();\n      if (!this.isMove) return;\n\n      if (e.touches.length == 1) {\n        let x = e.touches[0].screenX;\n        let y = e.touches[0].screenY;\n        let mx = x - this.startScreen.x + this.posImg.x;\n        let my = y - this.startScreen.y + this.posImg.y;\n        this.drawImg(this.ctx, this.img, mx, my, this.imgWidth, this.imgHeight);\n\n        this.endImgWidth = this.imgWidth;\n        this.endImgHeight = this.imgHeight;\n\n        this.endScreen = {\n          x: mx,\n          y: my\n        };\n      }\n\n      if (e.touches.length == 2) {\n        let x =\n          e.touches[0].screenX <= e.touches[1].screenX\n            ? e.touches[0].screenX\n            : e.touches[1].screenX;\n        let y =\n          e.touches[0].screenX <= e.touches[1].screenX\n            ? e.touches[0].screenY\n            : e.touches[1].screenY;\n        let mx = x - this.startScreen.x + this.posImg.x;\n        let my = y - this.startScreen.y + this.posImg.y;\n        this.scaleMove = {\n          x1: e.touches[0].screenX,\n          y1: e.touches[0].screenY,\n          x2: e.touches[1].screenX,\n          y2: e.touches[1].screenY\n        };\n        // 缩小的比例\n        let widthRate = (\n          (Math.abs(this.scaleStart.x2 - this.scaleStart.x1) -\n            Math.abs(this.scaleMove.x2 - this.scaleMove.x1)) /\n          Math.abs(this.scaleStart.x2 - this.scaleStart.x1)\n        ).toFixed(2);\n        this.widthRate = widthRate;\n\n        const imgWidth = this.imgWidth - this.imgWidth * this.widthRate;\n        const imgHeight = this.imgHeight - this.imgHeight * this.widthRate;\n        this.drawImg(this.ctx, this.img, mx, my, imgWidth, imgHeight);\n        this.endImgWidth = imgWidth;\n        this.endImgHeight = imgHeight;\n        this.endScreen = {\n          x: mx,\n          y: my\n        };\n      }\n    },\n    handleTouchEnd(e) {\n      if (!this.isMove) return;\n      this.posImg = this.endScreen;\n      this.imgWidth = this.endImgWidth;\n      this.imgHeight = this.endImgHeight;\n      this.scaleStart = this.scaleMove;\n    }\n  }\n};\n</script>\n<style scoped>\n.vquick-cropper {\n  height: 100%;\n  background: rgba(0, 0, 0, 0.9);\n  overflow: hidden;\n}\n</style>","\nimport VueQuickCropper from './src/VueQuickCropper.vue';\n\nexport default {\n    install(Vue){\n        Vue.component('quick-cropper', VueQuickCropper)\n    }\n}"]}